

```{r}
#| warning: false
#| code-fold: true
#| code-summary: 'Show the code'
library(tidyverse)
library(lubridate)
model_data <- readRDS('data/struc_model_data.rds')
```

```{r}
library(forecast)
CP_data <- model_data %>% 
  select(date, CPICORE, CPI_EXP, USD, YGAP) %>% 
  mutate(
    CPICORE_lag  = dplyr::lag(CPICORE, 1),
    dlog_USD     = log(USD/dplyr::lag(USD))*100,
    YGAP_lag     = dplyr::lag(YGAP, 1),
    dlog_USD_positive = if_else(dlog_USD > 0, 1, 0)
    )

cp_fit <- lm(CPICORE ~ CPICORE_lag + CPI_EXP + YGAP_lag + dlog_USD -1, CP_data)
summary(cp_fit)
forecast::checkresiduals(cp_fit)
```

```{r}
cp_fit_plot <- cp_fit %>% 
  broom::augment() %>% 
  left_join(
    CP_data %>% 
      select(date) %>% 
      rowid_to_column(var = '.rownames') %>% 
      mutate(.rownames = as.character(.rownames))
  )

cp_fit_plot %>% 
  ggplot(aes(x = date)) +
  geom_line(aes(y = CPICORE, color = 'CPICORE'), lwd = 1) +
  geom_line(aes(y = .fitted, color = 'Model'), lwd = 1) +
  theme_light() +
  labs(
    title = 'CPI Core: Observed vs. Fitted (%QoQ SA)',
    x = '',
    y = '%',
    color = ''
  )
```

```{r}
cp_decomp <- cp_fit_plot %>% 
  select(date, names(cp_fit$coefficients)) %>% 
  pivot_longer(-date, names_to = 'term', values_to = 'value') %>% 
  left_join(
    cp_fit %>% 
      broom::tidy() %>% 
      select(term, estimate)
  ) %>% 
  mutate(contribution = value*estimate) %>% 
  bind_rows(
    cp_fit_plot %>% 
      select(date, contribution = .resid) %>% 
      mutate(term = 'residual')
  )

cp_decomp %>% 
  ggplot(aes(x = date)) +
  geom_col(aes(y = contribution, fill = term)) +
  theme_light() +
  scale_fill_brewer(type = 'qual', palette = 6) +
  labs(
    title = 'Contribution of each variable to Core CPI (p.p)',
    x = '', 
    y = '', 
    fill = 'Variable'
    )
```


```{r}
library(bimets)
#| warning: false

model_spec <- "
MODEL

COMMENT> IS Curve
BEHAVIORAL> YGAP
TSRANGE 2005 1 2022 4
EQ> YGAP = c1*TSLAG(YGAP,1) + c2*TSLAG((IR_EXP - CPI_EXP - IR_EQ),3) + c3*TOT_GAP
COEFF> c1 c2 c3

COMMENT> Phillips Curve
BEHAVIORAL> CPICORE
TSRANGE 2005 1 2022 4
EQ> CPICORE = c4*TSLAG(CPICORE,1) + c5*CPI_EXP + c6*(TSDELTALOG(USD)) + c7*TSLAG(YGAP,1)
COEFF> c4 c5 c6 c7
RESTRICT> c4+c5+c6=1

COMMENT> Taylor Rule
BEHAVIORAL> MPR
TSRANGE 2005 1 2022 4
EQ> MPR = c8*TSLAG(MPR,1) + c9*TSLAG(MPR,2) + c10*(CPI_EXP - CPI_TARGET_ADJ) + c11*(IR_EQ + CPI_TARGET_ADJ)
COEFF> c8 c9 c10 c11
RESTRICT> c8+c9+c10=1

END
"

macro_model   <- LOAD_MODEL(modelText = model_spec)
model_data_ts <- model_data %>% 
  pivot_longer(-date, names_to = 'var', values_to = 'value') %>% 
  plyr::dlply(
    .variables = 'var', 
    .fun = function(x){
      TIMESERIES(x$value, START = c(2004,1), FREQ = 4)
    }
  )

macro_model <- LOAD_MODEL_DATA(macro_model, model_data_ts)
```

```{r}
model_fit <- ESTIMATE(
  macro_model, estTech = 'OLS'
)

model_fit$modelData <-  within(
  model_fit$modelData, {
    CPI_TARGET_ADJ    = TSEXTEND(CPI_TARGET_ADJ,  UPTO=c(2026,1),EXTMODE='CONSTANT')
    CPI_EXP           = TSEXTEND(CPI_EXP,         UPTO=c(2026,1),EXTMODE='CONSTANT')
    USD               = TSEXTEND(USD,             UPTO=c(2026,1),EXTMODE='LINEAR')
    IR_EQ             = TSEXTEND(IR_EQ,           UPTO=c(2026,1),EXTMODE='CONSTANT')
    IR_EXP            = TSEXTEND(IR_EXP,          UPTO=c(2026,1),EXTMODE='CONSTANT')
    TOT_GAP           = TSEXTEND(TOT_GAP,         UPTO=c(2026,1),EXTMODE='LINEAR')
  }
)

model_sim <- SIMULATE(
  model_fit,
  simType = 'FORECAST',
  TSRANGE = c(2023,1,2025,1),
  simConvergence = 0.00001,
  simIterLimit = 100,
  quietly = TRUE
)
```

```{r}
output <- do.call(ts.intersect, model_fit$modelData) %>% 
  timetk::tk_tbl(rename_index = 'date') %>% 
  mutate(type = 'Observed') %>% 
  bind_rows(
    do.call(ts.intersect, model_sim$simulation[1:3]) %>% 
      timetk::tk_tbl(rename_index = 'date') %>% 
      mutate(type = 'Forecast')
  ) %>% 
  mutate(date = zoo::as.yearqtr(date))
  
output %>% 
  select(date, YGAP, CPICORE, MPR, type) %>% 
  pivot_longer(-c(date, type), names_to = 'var', values_to = 'value') %>% 
  ggplot(aes(x = date)) +
  geom_line(aes(y = value, color = type, linetype = type)) +
  scale_linetype_manual(values = c(2,1)) +
  zoo::scale_x_yearqtr(n = 10, format = '%YQ%q') +
  facet_wrap(~ var, scales = 'free_y', nrow = 3) +
  theme(legend.position = 'top')
```
